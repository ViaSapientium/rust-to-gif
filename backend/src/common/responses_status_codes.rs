pub enum ResponsesInformationalCodes {
  // NOTE HTTP client informational
  Continue = 100,
  SwitchingProtocols = 101,
  Processing = 102,
  EarlyHints = 103,
}

impl ResponsesInformationalCodes {
  pub fn to_u16(&self) -> u16 {
    *self as u16
  }

  pub fn description(&self) -> &'static str {
    match self {
      // NOTE HTTP Client Informational
      ResponsesInformationalCodes::Continue => "Waiting for the continuation of the request",
      ResponsesInformationalCodes::SwitchingProtocols => "Acceptance of protocol change",
      ResponsesInformationalCodes::Processing => "Processing in progress (prevents the customer from exceeding the waiting time limit)",
      ResponsesInformationalCodes::EarlyHints => "(Experimental) While waiting for the final response, the server returns links that the client can start downloading",
    }
  }
}

pub enum ResponsesSuccessCodes {
  // NOTE HTTP Client Success
  Ok = 200,
  Created = 201,
  Accepted = 202,
  NonAuthoritativeInformation = 203,
  NoContent = 204,
  ResetContent = 205,
  PartialContent = 206,
  MultiStatus = 207,
  AlreadyReported = 208,
  ContentDifferent = 210,

  IMUsed = 226,
}

impl ResponsesSuccessCodes {
  pub fn to_u16(&self) -> u16 {
    *self as u16
  }

  pub fn description(&self) -> &'static str {
    match self {
        // NOTE HTTP Client Success
          ResponsesSuccessCodes::Ok => "Request processed successfully. Response will depend on the request method used",
          ResponsesSuccessCodes::Created => "Request processed successfully and document created",
          ResponsesSuccessCodes::Accepted => "Request processed, but with no guarantee of results",
          ResponsesSuccessCodes::NonAuthoritativeInformation => "Information returned, but generated by an uncertified source",
          ResponsesSuccessCodes::NoContent => "Request processed successfully but no information to return",
          ResponsesSuccessCodes::ResetContent => "Request processed successfully, current page can be deleted",
          ResponsesSuccessCodes::PartialContent => "Only part of the resource was transmitted",
          ResponsesSuccessCodes::MultiStatus => "Multiple status responses",
          ResponsesSuccessCodes::AlreadyReported => "The document was previously submitted to this collection",
          ResponsesSuccessCodes::ContentDifferent => "The client-side copy of the resource differs from the server-side copy (content or properties)",
          ResponsesSuccessCodes::IMUsed => "The server has completed the request for the resource, and the response is a representation of the result of one or more instance manipulations applied to the current instance",
      }
  }
}

pub enum ResponsesErrorCodes {
  // NOTE HTTP Client Error
  BadRequest = 400,
  Unauthorized = 401,
  PaymentRequired = 402,
  Forbidden = 403,
  NotFound = 404,
  MethodNotAllowed = 405,
  NotAcceptable = 406,
  ProxyAuthenticationRequired = 407,
  RequestTimeout = 408,
  Conflict = 409,
  Gone = 410,
  LengthRequired = 411,
  PreconditionFailed = 412,
  RequestEntityTooLarge = 413,
  RequestUriTooLong = 414,
  UnsupportedMediaType = 415,
  RequestedRangeUnsatisfiable = 416,
  ExpectationFailed = 417,
  ImATeapot = 418,
  PageExpired = 419, // Laravel custom
  MisdirectedRequest = 421,
  UnprocessableEntity = 422,
  Locked = 423,
  FailedDependency = 424,
  TooEarly = 425,
  UpgradeRequired = 426,
  PreconditionRequired = 428,
  TooManyRequests = 429,
  RequestHeaderFieldsTooLarge = 431,
  LoginRequired = 432,
  OriginError = 433,
  DestinationError = 434,
  TooLarge = 435,
  SSLCertificateError = 436,
  SSLCertificateRequired = 437,
  NoCertificate = 438,
  // NOTE Custom/Non-standard Error Codes
  LoginTimeout = 440,
  OverDataQuota = 441,
  NoResponse = 444,
  RetryWith = 449,
  BlockedByWindowsParentalControls = 450,
  UnavailableForLegalReasons = 451,
  TooManyRecipients = 452,
  MethodNotValidInThisState = 455,
  UnrecoverableError = 456,
  ClientClosedConnexionPrematurely = 460,
  TooManyForwardedIPAddresses = 463,
  InternetSecurityError = 467,
  TemporaryUnavailable = 480,
  RequestHeaderTooLarge = 494,
  CertError = 495,
  NoCert = 496,
  HTTPToHTTPS = 497,
  InvalidToken = 498,
  ClientClosedRequest = 499,
  // NOTE Server/Application Server Errors
  InternalServerError = 500,
  NotImplemented = 501,
  BadGateway = 502,
  ServiceUnavailable = 503,
  GatewayTimeout = 504,
  HTTPVersionNotSupported = 505,
  VariantAlsoNegotiates = 506,
  InsufficientStorage = 507,
  LoopDetected = 508,
  BandwidthLimitExceeded = 509,
  NotExtended = 510,
  NetworkAuthenticationRequired = 511,
  // NOTE Cloudflare Error Codes
  UnknownError = 520,
  WebServerIsDown = 521,
  ConnectionTimedOut = 522,
  OriginConnectionTimeOut = 523,
  ProxyDeclinedRequest = 524,
  SSLHandshakeFailed = 525,
  InvalidSSLCertificate = 526,
  RailgunError = 527,
  SiteIsFrozen = 530,
}

impl ResponsesErrorCodes {
  pub fn to_u16(&self) -> u16 {
    *self as u16
  }

  pub fn description(&self) -> &'static str {
    match self {
          // NOTE HTTP Client Error
          ResponsesErrorCodes::BadRequest => "The query syntax is incorrect",
          ResponsesErrorCodes::Unauthorized => "Authentication is required to access the resource",
          ResponsesErrorCodes::PaymentRequired => "Payment required to access the resource",
          ResponsesErrorCodes::Forbidden => "The server understood the request, but refuses to execute it",
          ResponsesErrorCodes::NotFound => "Resource not found",
          ResponsesErrorCodes::MethodNotAllowed => "Request method not allowed",
          ResponsesErrorCodes::NotAcceptable => "The requested resource is not available in the requested format",
          ResponsesErrorCodes::ProxyAuthenticationRequired => "Proxy authentication required",
          ResponsesErrorCodes::RequestTimeout => "The client did not produce a request within the time that the server was prepared to wait",
          ResponsesErrorCodes::Conflict => "The request cannot be processed due to a conflict with the current state of the resource",
          ResponsesErrorCodes::Gone => "The resource is no longer available and no forwarding address is known",
          ResponsesErrorCodes::LengthRequired => "The length of the request body is required",
          ResponsesErrorCodes::PreconditionFailed => "Precondition failed",
          ResponsesErrorCodes::RequestEntityTooLarge => "The request payload is too large",
          ResponsesErrorCodes::RequestUriTooLong => "The URI provided was too long for the server to process",
          ResponsesErrorCodes::UnsupportedMediaType => "The media format of the requested data is not supported by the server",
          ResponsesErrorCodes::RequestedRangeUnsatisfiable => "The range specified in the request cannot be satisfied",
          ResponsesErrorCodes::ExpectationFailed => "The server cannot meet the requirements of the Expect request-header field",
          ResponsesErrorCodes::ImATeapot => "I'm a teapot (RFC 2324)",
          ResponsesErrorCodes::PageExpired => "The page has expired and cannot be used, often associated with CSRF token errors",
          ResponsesErrorCodes::MisdirectedRequest => "The request was directed at a server that is not able to produce a response",
          ResponsesErrorCodes::UnprocessableEntity => "The request was well-formed but was unable to be followed due to semantic errors",
          ResponsesErrorCodes::Locked => "The resource that is being accessed is locked",
          ResponsesErrorCodes::FailedDependency => "The request failed due to failure of a previous request",
          ResponsesErrorCodes::TooEarly => "The server is unwilling to risk processing a request that might be replayed",
          ResponsesErrorCodes::UpgradeRequired => "The client should switch to a different protocol",
          ResponsesErrorCodes::PreconditionRequired => "The origin server requires the request to be conditional",
          ResponsesErrorCodes::TooManyRequests => "The user has sent too many requests in a given amount of time",
          ResponsesErrorCodes::RequestHeaderFieldsTooLarge => "The server is unwilling to process the request because its header fields are too large",
          ResponsesErrorCodes::LoginRequired => "The user must log in to access the resource",
          ResponsesErrorCodes::OriginError => "The server has encountered an error in an external server when trying to process the request",
          ResponsesErrorCodes::DestinationError => "The server has encountered an error in an external server when trying to process the request",
          ResponsesErrorCodes::TooLarge => "The request is larger than the server is willing or able to process",
          ResponsesErrorCodes::SSLCertificateError => "The SSL certificate presented by the server is invalid",
          ResponsesErrorCodes::SSLCertificateRequired => "The client must provide a valid SSL certificate",
          ResponsesErrorCodes::NoCertificate => "The client must provide a valid SSL certificate",
          // NOTE Custom/Non-standard Error Codes
          ResponsesErrorCodes::LoginTimeout => "The user's login has timed out",
          ResponsesErrorCodes::OverDataQuota => "The user has exceeded their data quota",
          ResponsesErrorCodes::NoResponse => "The server did not return any response",
          ResponsesErrorCodes::RetryWith => "The request should be retried with another server",
          ResponsesErrorCodes::BlockedByWindowsParentalControls => "Blocked by Windows Parental Controls",
          ResponsesErrorCodes::UnavailableForLegalReasons => "The resource is unavailable for legal reasons",
          ResponsesErrorCodes::TooManyRecipients => "The request cannot be processed because it has too many recipients",
          ResponsesErrorCodes::MethodNotValidInThisState => "The method is not valid in this state",
          ResponsesErrorCodes::UnrecoverableError => "An unrecoverable error occurred",
          ResponsesErrorCodes::ClientClosedConnexionPrematurely => "The client closed the connection prematurely",
          ResponsesErrorCodes::TooManyForwardedIPAddresses => "The request passed through an excessive number of proxies or intermediaries, making the origin of the request unreliable or suspicious. This may indicate tampering or potential abuse by the client or network",
          ResponsesErrorCodes::InternetSecurityError => "An internet security error occurred",
          ResponsesErrorCodes::TemporaryUnavailable => "The server is temporarily unavailable, often used to indicate that an endpoint is not yet available",
          ResponsesErrorCodes::RequestHeaderTooLarge => "The request headers are too large for the server to process",
          ResponsesErrorCodes::CertError => "SSL certificate error: The certificate presented is invalid or cannot be verified",
          ResponsesErrorCodes::NoCert => "SSL Certificate Required: The client must present a valid SSL certificate to access this resource",
          ResponsesErrorCodes::HTTPToHTTPS => "HTTP request sent to an HTTPS port: Please use HTTPS to access this resource",
          ResponsesErrorCodes::InvalidToken => "The token is invalid or expired",
          ResponsesErrorCodes::ClientClosedRequest => "The client closed the connection before the server answered",
          // NOTE Server/Application Server Errors
          ResponsesErrorCodes::InternalServerError => "The server encountered an internal error",
          ResponsesErrorCodes::NotImplemented => "The server does not support the functionality required to fulfill the request",
          ResponsesErrorCodes::BadGateway => "The server was acting as a gateway or proxy and received an invalid response from the upstream server",
          ResponsesErrorCodes::ServiceUnavailable => "The server is currently unable to handle the request due to temporary overloading or maintenance",
          ResponsesErrorCodes::GatewayTimeout => "The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server",
          ResponsesErrorCodes::HTTPVersionNotSupported => "The server does not support the HTTP protocol version used in the request",
          ResponsesErrorCodes::VariantAlsoNegotiates => "Transparent content negotiation for the request results in a circular reference",
          ResponsesErrorCodes::InsufficientStorage => "The server is unable to store the representation needed to complete the request",
          ResponsesErrorCodes::LoopDetected => "The server detected an infinite loop while processing the request",
          ResponsesErrorCodes::BandwidthLimitExceeded => "The server has exceeded the bandwidth limit",
          ResponsesErrorCodes::NotExtended => "Further extensions to the request are required for the server to fulfill it",
          ResponsesErrorCodes::NetworkAuthenticationRequired => "The client needs to authenticate to gain network access",
          // NOTE Cloudflare Error Codes
          ResponsesErrorCodes::UnknownError => "An unknown error occurred",
          ResponsesErrorCodes::WebServerIsDown => "The web server is down",
          ResponsesErrorCodes::ConnectionTimedOut => "The connection timed out",
          ResponsesErrorCodes::OriginConnectionTimeOut => "The connection to the origin server timed out",
          ResponsesErrorCodes::ProxyDeclinedRequest => "The proxy declined the request",
          ResponsesErrorCodes::SSLHandshakeFailed => "SSL handshake failed",
          ResponsesErrorCodes::InvalidSSLCertificate => "Invalid SSL certificate",
          ResponsesErrorCodes::RailgunError => "Railgun error",
          ResponsesErrorCodes::SiteIsFrozen => "The site is frozen",
      }
  }
}
